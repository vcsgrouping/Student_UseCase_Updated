/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.student_usecase.school_db;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.List;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * Academics generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`ACADEMICS`")
@IdClass(AcademicsId.class)
public class Academics implements Serializable {

    private String academicYear;
    private Integer standardId;
    private String classRoom;
    private String classTeacher;
    private AcademicYear academicYearByAcademicYear;
    private StandardDetails standardDetails;
    private List<AcademicSubjects> academicSubjectses;
    private List<StudentAcademics> studentAcademicses;

    @Id
    @Column(name = "`ACADEMIC_YEAR`", nullable = false, length = 255)
    public String getAcademicYear() {
        return this.academicYear;
    }

    public void setAcademicYear(String academicYear) {
        this.academicYear = academicYear;
    }

    @Id
    @Column(name = "`STANDARD_ID`", nullable = false, scale = 0, precision = 10)
    public Integer getStandardId() {
        return this.standardId;
    }

    public void setStandardId(Integer standardId) {
        this.standardId = standardId;
    }

    @Column(name = "`CLASS_ROOM`", nullable = true, length = 255)
    public String getClassRoom() {
        return this.classRoom;
    }

    public void setClassRoom(String classRoom) {
        this.classRoom = classRoom;
    }

    @Column(name = "`CLASS_TEACHER`", nullable = true, length = 255)
    public String getClassTeacher() {
        return this.classTeacher;
    }

    public void setClassTeacher(String classTeacher) {
        this.classTeacher = classTeacher;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`ACADEMIC_YEAR`", referencedColumnName = "`ACADEMIC_YEAR`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_ACADEMICS_TO_ACADEMICtXssM`"))
    @Fetch(FetchMode.JOIN)
    public AcademicYear getAcademicYearByAcademicYear() {
        return this.academicYearByAcademicYear;
    }

    public void setAcademicYearByAcademicYear(AcademicYear academicYearByAcademicYear) {
        if(academicYearByAcademicYear != null) {
            this.academicYear = academicYearByAcademicYear.getAcademicYear();
        }

        this.academicYearByAcademicYear = academicYearByAcademicYear;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`STANDARD_ID`", referencedColumnName = "`STANDARD_ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_ACADEMICS_TO_STANDARDjy42t`"))
    @Fetch(FetchMode.JOIN)
    public StandardDetails getStandardDetails() {
        return this.standardDetails;
    }

    public void setStandardDetails(StandardDetails standardDetails) {
        if(standardDetails != null) {
            this.standardId = standardDetails.getStandardId();
        }

        this.standardDetails = standardDetails;
    }
    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "academics")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<AcademicSubjects> getAcademicSubjectses() {
        return this.academicSubjectses;
    }

    public void setAcademicSubjectses(List<AcademicSubjects> academicSubjectses) {
        this.academicSubjectses = academicSubjectses;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "academics")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<StudentAcademics> getStudentAcademicses() {
        return this.studentAcademicses;
    }

    public void setStudentAcademicses(List<StudentAcademics> studentAcademicses) {
        this.studentAcademicses = studentAcademicses;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Academics)) return false;
        final Academics academics = (Academics) o;
        return Objects.equals(getAcademicYear(), academics.getAcademicYear()) &&
                Objects.equals(getStandardId(), academics.getStandardId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getAcademicYear(),
                getStandardId());
    }
}