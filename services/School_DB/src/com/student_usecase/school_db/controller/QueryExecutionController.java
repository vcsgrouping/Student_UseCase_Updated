/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.student_usecase.school_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.student_usecase.school_db.service.School_DBQueryExecutorService;
import com.student_usecase.school_db.models.query.*;

@RestController(value = "School_DB.QueryExecutionController")
@RequestMapping("/School_DB/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private School_DBQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/SV_Top3StudentsFromAllStandards", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Top3StudentsFromAllStandards")
    public Page<SvTop3studentsFromAllStandardsResponse> executeSV_Top3StudentsFromAllStandards(@RequestParam(value = "TESTID") Integer testid, @RequestParam(value = "ACADEMICYEAR") String academicyear, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_Top3StudentsFromAllStandards");
        Page<SvTop3studentsFromAllStandardsResponse> _result = queryService.executeSV_Top3StudentsFromAllStandards(testid, academicyear, pageable);
        LOGGER.debug("got the result for named query: SV_Top3StudentsFromAllStandards, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_Top3StudentsFromAllStandards")
    @RequestMapping(value = "/queries/SV_Top3StudentsFromAllStandards/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSV_Top3StudentsFromAllStandards(@RequestParam(value = "TESTID") Integer testid, @RequestParam(value = "ACADEMICYEAR") String academicyear, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_Top3StudentsFromAllStandards");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_Top3StudentsFromAllStandards";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_Top3StudentsFromAllStandards(testid, academicyear,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_AcademicSubjectsByStandard", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "AcademicSubjectsByStandard")
    public Page<SvAcademicSubjectsByStandardResponse> executeSV_AcademicSubjectsByStandard(@RequestParam(value = "year") String year, @RequestParam(value = "standard") Integer standard, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_AcademicSubjectsByStandard");
        Page<SvAcademicSubjectsByStandardResponse> _result = queryService.executeSV_AcademicSubjectsByStandard(year, standard, pageable);
        LOGGER.debug("got the result for named query: SV_AcademicSubjectsByStandard, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_AcademicSubjectsByStandard")
    @RequestMapping(value = "/queries/SV_AcademicSubjectsByStandard/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSV_AcademicSubjectsByStandard(@RequestParam(value = "year") String year, @RequestParam(value = "standard") Integer standard, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_AcademicSubjectsByStandard");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_AcademicSubjectsByStandard";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_AcademicSubjectsByStandard(year, standard,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_CountOfStudentPerGrade", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Performance Students Per Grade")
    public Page<SvCountOfStudentPerGradeResponse> executeSV_CountOfStudentPerGrade(@RequestParam(value = "academicYear") String academicYear, @RequestParam(value = "standardid") Integer standardid, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_CountOfStudentPerGrade");
        Page<SvCountOfStudentPerGradeResponse> _result = queryService.executeSV_CountOfStudentPerGrade(academicYear, standardid, pageable);
        LOGGER.debug("got the result for named query: SV_CountOfStudentPerGrade, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_CountOfStudentPerGrade")
    @RequestMapping(value = "/queries/SV_CountOfStudentPerGrade/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSV_CountOfStudentPerGrade(@RequestParam(value = "academicYear") String academicYear, @RequestParam(value = "standardid") Integer standardid, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_CountOfStudentPerGrade");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_CountOfStudentPerGrade";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_CountOfStudentPerGrade(academicYear, standardid,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_CountOfStudents", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Count Of Students")
    public Page<SvCountOfStudentsResponse> executeSV_CountOfStudents(@RequestParam(value = "standard") Integer standard, @RequestParam(value = "year") String year, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_CountOfStudents");
        Page<SvCountOfStudentsResponse> _result = queryService.executeSV_CountOfStudents(standard, year, pageable);
        LOGGER.debug("got the result for named query: SV_CountOfStudents, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_CountOfStudents")
    @RequestMapping(value = "/queries/SV_CountOfStudents/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSV_CountOfStudents(@RequestParam(value = "standard") Integer standard, @RequestParam(value = "year") String year, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_CountOfStudents");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_CountOfStudents";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_CountOfStudents(standard, year,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_GetSTudentResultsForStandard", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Performance Chart")
    public Page<SvGetStudentResultsForStandardResponse> executeSV_GetSTudentResultsForStandard(@RequestParam(value = "academicYear") String academicYear, @RequestParam(value = "standardid") Integer standardid, @RequestParam(value = "testid") Integer testid, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_GetSTudentResultsForStandard");
        Page<SvGetStudentResultsForStandardResponse> _result = queryService.executeSV_GetSTudentResultsForStandard(academicYear, standardid, testid, pageable);
        LOGGER.debug("got the result for named query: SV_GetSTudentResultsForStandard, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_GetSTudentResultsForStandard")
    @RequestMapping(value = "/queries/SV_GetSTudentResultsForStandard/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSV_GetSTudentResultsForStandard(@RequestParam(value = "academicYear") String academicYear, @RequestParam(value = "standardid") Integer standardid, @RequestParam(value = "testid") Integer testid, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_GetSTudentResultsForStandard");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_GetSTudentResultsForStandard";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_GetSTudentResultsForStandard(academicYear, standardid, testid,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

}