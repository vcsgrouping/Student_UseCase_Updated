/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.student_usecase.studentportal_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Date;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.student_usecase.studentportal_db.service.StudentPortal_DBQueryExecutorService;
import com.student_usecase.studentportal_db.models.query.*;

@RestController(value = "StudentPortal_DB.QueryExecutionController")
@RequestMapping("/StudentPortal_DB/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private StudentPortal_DBQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/SV_TestDetails", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Test Details")
    public Page<SvTestDetailsResponse> executeSV_TestDetails(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_TestDetails");
        Page<SvTestDetailsResponse> _result = queryService.executeSV_TestDetails(pageable);
        LOGGER.debug("got the result for named query: SV_TestDetails, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_TestDetails")
    @RequestMapping(value = "/queries/SV_TestDetails/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSV_TestDetails(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_TestDetails");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_TestDetails";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_TestDetails( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_ResultsByTestID", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Results")
    public Page<SvResultsByTestIdResponse> executeSV_ResultsByTestID(@RequestParam(value = "T_Name") String tname, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_ResultsByTestID");
        Page<SvResultsByTestIdResponse> _result = queryService.executeSV_ResultsByTestID(tname, pageable);
        LOGGER.debug("got the result for named query: SV_ResultsByTestID, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_ResultsByTestID")
    @RequestMapping(value = "/queries/SV_ResultsByTestID/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSV_ResultsByTestID(@RequestParam(value = "T_Name") String tname, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_ResultsByTestID");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_ResultsByTestID";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_ResultsByTestID(tname,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_StudentAcademicResults", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Entire Academic Results")
    public Page<SvStudentAcademicResultsResponse> executeSV_StudentAcademicResults(@RequestParam(value = "student_id") Integer studentId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_StudentAcademicResults");
        Page<SvStudentAcademicResultsResponse> _result = queryService.executeSV_StudentAcademicResults(studentId, pageable);
        LOGGER.debug("got the result for named query: SV_StudentAcademicResults, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_StudentAcademicResults")
    @RequestMapping(value = "/queries/SV_StudentAcademicResults/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSV_StudentAcademicResults(@RequestParam(value = "student_id") Integer studentId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_StudentAcademicResults");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_StudentAcademicResults";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_StudentAcademicResults(studentId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_TestQuery", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "cubgjnhj")
    public Page<SvTestQueryResponse> executeSV_TestQuery(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_TestQuery");
        Page<SvTestQueryResponse> _result = queryService.executeSV_TestQuery(pageable);
        LOGGER.debug("got the result for named query: SV_TestQuery, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_TestQuery")
    @RequestMapping(value = "/queries/SV_TestQuery/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSV_TestQuery(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_TestQuery");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_TestQuery";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_TestQuery( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_AcademicSubjectsByStandard", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Fetching the academic Subjects for the particular standard")
    public Page<SvAcademicSubjectsByStandardResponse> executeSV_AcademicSubjectsByStandard(@RequestParam(value = "year") Date year, @RequestParam(value = "standard") String standard, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_AcademicSubjectsByStandard");
        Page<SvAcademicSubjectsByStandardResponse> _result = queryService.executeSV_AcademicSubjectsByStandard(year, standard, pageable);
        LOGGER.debug("got the result for named query: SV_AcademicSubjectsByStandard, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_AcademicSubjectsByStandard")
    @RequestMapping(value = "/queries/SV_AcademicSubjectsByStandard/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSV_AcademicSubjectsByStandard(@RequestParam(value = "year") Date year, @RequestParam(value = "standard") String standard, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_AcademicSubjectsByStandard");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_AcademicSubjectsByStandard";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_AcademicSubjectsByStandard(year, standard,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_CountOfStudentsInAcademics", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Count Of Students in particular academic")
    public Page<SvCountOfStudentsInAcademicsResponse> executeSV_CountOfStudentsInAcademics(@RequestParam(value = "standard") String standard, @RequestParam(value = "year") Date year, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_CountOfStudentsInAcademics");
        Page<SvCountOfStudentsInAcademicsResponse> _result = queryService.executeSV_CountOfStudentsInAcademics(standard, year, pageable);
        LOGGER.debug("got the result for named query: SV_CountOfStudentsInAcademics, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_CountOfStudentsInAcademics")
    @RequestMapping(value = "/queries/SV_CountOfStudentsInAcademics/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSV_CountOfStudentsInAcademics(@RequestParam(value = "standard") String standard, @RequestParam(value = "year") Date year, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_CountOfStudentsInAcademics");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_CountOfStudentsInAcademics";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_CountOfStudentsInAcademics(standard, year,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

}