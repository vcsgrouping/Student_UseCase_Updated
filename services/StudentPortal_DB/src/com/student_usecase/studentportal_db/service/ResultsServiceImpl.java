/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.student_usecase.studentportal_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.student_usecase.studentportal_db.Results;
import com.student_usecase.studentportal_db.ResultsId;


/**
 * ServiceImpl object for domain model class Results.
 *
 * @see Results
 */
@Service("StudentPortal_DB.ResultsService")
@Validated
@EntityService(entityClass = Results.class, serviceId = "StudentPortal_DB")
public class ResultsServiceImpl implements ResultsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ResultsServiceImpl.class);


    @Autowired
    @Qualifier("StudentPortal_DB.ResultsDao")
    private WMGenericDao<Results, ResultsId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Results, ResultsId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "StudentPortal_DBTransactionManager")
    @Override
    public Results create(Results results) {
        LOGGER.debug("Creating a new Results with information: {}", results);

        Results resultsCreated = this.wmGenericDao.create(results);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(resultsCreated);
    }

    @Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager")
    @Override
    public Results getById(ResultsId resultsId) {
        LOGGER.debug("Finding Results by id: {}", resultsId);
        return this.wmGenericDao.findById(resultsId);
    }

    @Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager")
    @Override
    public Results findById(ResultsId resultsId) {
        LOGGER.debug("Finding Results by id: {}", resultsId);
        try {
            return this.wmGenericDao.findById(resultsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Results found with id: {}", resultsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager")
    @Override
    public List<Results> findByMultipleIds(List<ResultsId> resultsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Results by ids: {}", resultsIds);

        return this.wmGenericDao.findByMultipleIds(resultsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "StudentPortal_DBTransactionManager")
    @Override
    public Results update(Results results) {
        LOGGER.debug("Updating Results with information: {}", results);

        this.wmGenericDao.update(results);
        this.wmGenericDao.refresh(results);

        return results;
    }

    @Transactional(value = "StudentPortal_DBTransactionManager")
    @Override
    public Results partialUpdate(ResultsId resultsId, Map<String, Object>resultsPatch) {
        LOGGER.debug("Partially Updating the Results with id: {}", resultsId);

        Results results = getById(resultsId);

        try {
            ObjectReader resultsReader = this.objectMapper.reader().forType(Results.class).withValueToUpdate(results);
            results = resultsReader.readValue(this.objectMapper.writeValueAsString(resultsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", resultsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        results = update(results);

        return results;
    }

    @Transactional(value = "StudentPortal_DBTransactionManager")
    @Override
    public Results delete(ResultsId resultsId) {
        LOGGER.debug("Deleting Results with id: {}", resultsId);
        Results deleted = this.wmGenericDao.findById(resultsId);
        if (deleted == null) {
            LOGGER.debug("No Results found with id: {}", resultsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Results.class.getSimpleName(), resultsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "StudentPortal_DBTransactionManager")
    @Override
    public void delete(Results results) {
        LOGGER.debug("Deleting Results with {}", results);
        this.wmGenericDao.delete(results);
    }

    @Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager")
    @Override
    public Page<Results> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Results");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager")
    @Override
    public Page<Results> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Results");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service StudentPortal_DB for table Results to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service StudentPortal_DB for table Results to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}