/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.student_usecase.studentportal_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.student_usecase.studentportal_db.StudentDetails;
import com.student_usecase.studentportal_db.StudentDetailsId;


/**
 * ServiceImpl object for domain model class StudentDetails.
 *
 * @see StudentDetails
 */
@Service("StudentPortal_DB.StudentDetailsService")
@Validated
@EntityService(entityClass = StudentDetails.class, serviceId = "StudentPortal_DB")
public class StudentDetailsServiceImpl implements StudentDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(StudentDetailsServiceImpl.class);


    @Autowired
    @Qualifier("StudentPortal_DB.StudentDetailsDao")
    private WMGenericDao<StudentDetails, StudentDetailsId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<StudentDetails, StudentDetailsId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "StudentPortal_DBTransactionManager")
    @Override
    public StudentDetails create(StudentDetails studentDetails) {
        LOGGER.debug("Creating a new StudentDetails with information: {}", studentDetails);

        StudentDetails studentDetailsCreated = this.wmGenericDao.create(studentDetails);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(studentDetailsCreated);
    }

    @Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager")
    @Override
    public StudentDetails getById(StudentDetailsId studentdetailsId) {
        LOGGER.debug("Finding StudentDetails by id: {}", studentdetailsId);
        return this.wmGenericDao.findById(studentdetailsId);
    }

    @Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager")
    @Override
    public StudentDetails findById(StudentDetailsId studentdetailsId) {
        LOGGER.debug("Finding StudentDetails by id: {}", studentdetailsId);
        try {
            return this.wmGenericDao.findById(studentdetailsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No StudentDetails found with id: {}", studentdetailsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager")
    @Override
    public List<StudentDetails> findByMultipleIds(List<StudentDetailsId> studentdetailsIds, boolean orderedReturn) {
        LOGGER.debug("Finding StudentDetails by ids: {}", studentdetailsIds);

        return this.wmGenericDao.findByMultipleIds(studentdetailsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "StudentPortal_DBTransactionManager")
    @Override
    public StudentDetails update(StudentDetails studentDetails) {
        LOGGER.debug("Updating StudentDetails with information: {}", studentDetails);

        this.wmGenericDao.update(studentDetails);
        this.wmGenericDao.refresh(studentDetails);

        return studentDetails;
    }

    @Transactional(value = "StudentPortal_DBTransactionManager")
    @Override
    public StudentDetails partialUpdate(StudentDetailsId studentdetailsId, Map<String, Object>studentDetailsPatch) {
        LOGGER.debug("Partially Updating the StudentDetails with id: {}", studentdetailsId);

        StudentDetails studentDetails = getById(studentdetailsId);

        try {
            ObjectReader studentDetailsReader = this.objectMapper.reader().forType(StudentDetails.class).withValueToUpdate(studentDetails);
            studentDetails = studentDetailsReader.readValue(this.objectMapper.writeValueAsString(studentDetailsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", studentDetailsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        studentDetails = update(studentDetails);

        return studentDetails;
    }

    @Transactional(value = "StudentPortal_DBTransactionManager")
    @Override
    public StudentDetails delete(StudentDetailsId studentdetailsId) {
        LOGGER.debug("Deleting StudentDetails with id: {}", studentdetailsId);
        StudentDetails deleted = this.wmGenericDao.findById(studentdetailsId);
        if (deleted == null) {
            LOGGER.debug("No StudentDetails found with id: {}", studentdetailsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), StudentDetails.class.getSimpleName(), studentdetailsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "StudentPortal_DBTransactionManager")
    @Override
    public void delete(StudentDetails studentDetails) {
        LOGGER.debug("Deleting StudentDetails with {}", studentDetails);
        this.wmGenericDao.delete(studentDetails);
    }

    @Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager")
    @Override
    public Page<StudentDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all StudentDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager")
    @Override
    public Page<StudentDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all StudentDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service StudentPortal_DB for table StudentDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service StudentPortal_DB for table StudentDetails to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "StudentPortal_DBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}