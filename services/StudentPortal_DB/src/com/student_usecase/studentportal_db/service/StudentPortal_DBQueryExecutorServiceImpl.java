/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.student_usecase.studentportal_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.sql.Date;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.model.QueryProcedureInput;

import com.student_usecase.studentportal_db.models.query.*;

@Service
public class StudentPortal_DBQueryExecutorServiceImpl implements StudentPortal_DBQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(StudentPortal_DBQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("StudentPortal_DBWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "StudentPortal_DBTransactionManager", readOnly = true)
    @Override
    public Page<SvTestDetailsResponse> executeSV_TestDetails(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("SV_TestDetails", params, SvTestDetailsResponse.class, pageable);
    }

    @Transactional(value = "StudentPortal_DBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportSV_TestDetails(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<SvTestDetailsResponse> queryInput = new QueryProcedureInput<>("SV_TestDetails", params, SvTestDetailsResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "StudentPortal_DBTransactionManager", readOnly = true)
    @Override
    public Page<SvResultsByTestIdResponse> executeSV_ResultsByTestID(String tname, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("T_Name", tname);

        return queryExecutor.executeNamedQuery("SV_ResultsByTestID", params, SvResultsByTestIdResponse.class, pageable);
    }

    @Transactional(value = "StudentPortal_DBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportSV_ResultsByTestID(String tname, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("T_Name", tname);

        QueryProcedureInput<SvResultsByTestIdResponse> queryInput = new QueryProcedureInput<>("SV_ResultsByTestID", params, SvResultsByTestIdResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "StudentPortal_DBTransactionManager", readOnly = true)
    @Override
    public Page<SvStudentAcademicResultsResponse> executeSV_StudentAcademicResults(Integer studentId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("student_id", studentId);

        return queryExecutor.executeNamedQuery("SV_StudentAcademicResults", params, SvStudentAcademicResultsResponse.class, pageable);
    }

    @Transactional(value = "StudentPortal_DBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportSV_StudentAcademicResults(Integer studentId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("student_id", studentId);

        QueryProcedureInput<SvStudentAcademicResultsResponse> queryInput = new QueryProcedureInput<>("SV_StudentAcademicResults", params, SvStudentAcademicResultsResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "StudentPortal_DBTransactionManager", readOnly = true)
    @Override
    public Page<SvTestQueryResponse> executeSV_TestQuery(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("SV_TestQuery", params, SvTestQueryResponse.class, pageable);
    }

    @Transactional(value = "StudentPortal_DBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportSV_TestQuery(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<SvTestQueryResponse> queryInput = new QueryProcedureInput<>("SV_TestQuery", params, SvTestQueryResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "StudentPortal_DBTransactionManager", readOnly = true)
    @Override
    public Page<SvAcademicSubjectsByStandardResponse> executeSV_AcademicSubjectsByStandard(Date year, String standard, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("year", year);
        params.put("standard", standard);

        return queryExecutor.executeNamedQuery("SV_AcademicSubjectsByStandard", params, SvAcademicSubjectsByStandardResponse.class, pageable);
    }

    @Transactional(value = "StudentPortal_DBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportSV_AcademicSubjectsByStandard(Date year, String standard, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("year", year);
        params.put("standard", standard);

        QueryProcedureInput<SvAcademicSubjectsByStandardResponse> queryInput = new QueryProcedureInput<>("SV_AcademicSubjectsByStandard", params, SvAcademicSubjectsByStandardResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "StudentPortal_DBTransactionManager", readOnly = true)
    @Override
    public Page<SvCountOfStudentsInAcademicsResponse> executeSV_CountOfStudentsInAcademics(String standard, Date year, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("standard", standard);
        params.put("year", year);

        return queryExecutor.executeNamedQuery("SV_CountOfStudentsInAcademics", params, SvCountOfStudentsInAcademicsResponse.class, pageable);
    }

    @Transactional(value = "StudentPortal_DBTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportSV_CountOfStudentsInAcademics(String standard, Date year, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("standard", standard);
        params.put("year", year);

        QueryProcedureInput<SvCountOfStudentsInAcademicsResponse> queryInput = new QueryProcedureInput<>("SV_CountOfStudentsInAcademics", params, SvCountOfStudentsInAcademicsResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

}